// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: problem.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProblemServiceClient is the client API for ProblemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProblemServiceClient interface {
	InsertProblem(ctx context.Context, in *Problem, opts ...grpc.CallOption) (*ProblemResponse, error)
	GetAllProblems(ctx context.Context, in *ProbNoParam, opts ...grpc.CallOption) (*ProblemList, error)
	FindProblemByID(ctx context.Context, in *ProblemId, opts ...grpc.CallOption) (*Problem, error)
	EditProblem(ctx context.Context, in *Problem, opts ...grpc.CallOption) (*Problem, error)
	AdminUpgradeProbem(ctx context.Context, in *ProblemId, opts ...grpc.CallOption) (*ProblemResponse, error)
	InsertTestCases(ctx context.Context, in *TestCaseRequest, opts ...grpc.CallOption) (*ProblemResponse, error)
	UpdateTestCases(ctx context.Context, in *UpdateTestCaseRequest, opts ...grpc.CallOption) (*ProblemResponse, error)
	GetProblemWithTestCases(ctx context.Context, in *ProblemId, opts ...grpc.CallOption) (*GetProblemResponse, error)
	SubmitCode(ctx context.Context, in *SubmissionRequest, opts ...grpc.CallOption) (*SubmissionResponse, error)
	GetUserStats(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*StatsResponse, error)
}

type problemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProblemServiceClient(cc grpc.ClientConnInterface) ProblemServiceClient {
	return &problemServiceClient{cc}
}

func (c *problemServiceClient) InsertProblem(ctx context.Context, in *Problem, opts ...grpc.CallOption) (*ProblemResponse, error) {
	out := new(ProblemResponse)
	err := c.cc.Invoke(ctx, "/pb.ProblemService/InsertProblem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) GetAllProblems(ctx context.Context, in *ProbNoParam, opts ...grpc.CallOption) (*ProblemList, error) {
	out := new(ProblemList)
	err := c.cc.Invoke(ctx, "/pb.ProblemService/GetAllProblems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) FindProblemByID(ctx context.Context, in *ProblemId, opts ...grpc.CallOption) (*Problem, error) {
	out := new(Problem)
	err := c.cc.Invoke(ctx, "/pb.ProblemService/FindProblemByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) EditProblem(ctx context.Context, in *Problem, opts ...grpc.CallOption) (*Problem, error) {
	out := new(Problem)
	err := c.cc.Invoke(ctx, "/pb.ProblemService/EditProblem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) AdminUpgradeProbem(ctx context.Context, in *ProblemId, opts ...grpc.CallOption) (*ProblemResponse, error) {
	out := new(ProblemResponse)
	err := c.cc.Invoke(ctx, "/pb.ProblemService/AdminUpgradeProbem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) InsertTestCases(ctx context.Context, in *TestCaseRequest, opts ...grpc.CallOption) (*ProblemResponse, error) {
	out := new(ProblemResponse)
	err := c.cc.Invoke(ctx, "/pb.ProblemService/InsertTestCases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) UpdateTestCases(ctx context.Context, in *UpdateTestCaseRequest, opts ...grpc.CallOption) (*ProblemResponse, error) {
	out := new(ProblemResponse)
	err := c.cc.Invoke(ctx, "/pb.ProblemService/UpdateTestCases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) GetProblemWithTestCases(ctx context.Context, in *ProblemId, opts ...grpc.CallOption) (*GetProblemResponse, error) {
	out := new(GetProblemResponse)
	err := c.cc.Invoke(ctx, "/pb.ProblemService/GetProblemWithTestCases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) SubmitCode(ctx context.Context, in *SubmissionRequest, opts ...grpc.CallOption) (*SubmissionResponse, error) {
	out := new(SubmissionResponse)
	err := c.cc.Invoke(ctx, "/pb.ProblemService/SubmitCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) GetUserStats(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*StatsResponse, error) {
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, "/pb.ProblemService/GetUserStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProblemServiceServer is the server API for ProblemService service.
// All implementations must embed UnimplementedProblemServiceServer
// for forward compatibility
type ProblemServiceServer interface {
	InsertProblem(context.Context, *Problem) (*ProblemResponse, error)
	GetAllProblems(context.Context, *ProbNoParam) (*ProblemList, error)
	FindProblemByID(context.Context, *ProblemId) (*Problem, error)
	EditProblem(context.Context, *Problem) (*Problem, error)
	AdminUpgradeProbem(context.Context, *ProblemId) (*ProblemResponse, error)
	InsertTestCases(context.Context, *TestCaseRequest) (*ProblemResponse, error)
	UpdateTestCases(context.Context, *UpdateTestCaseRequest) (*ProblemResponse, error)
	GetProblemWithTestCases(context.Context, *ProblemId) (*GetProblemResponse, error)
	SubmitCode(context.Context, *SubmissionRequest) (*SubmissionResponse, error)
	GetUserStats(context.Context, *UserID) (*StatsResponse, error)
	mustEmbedUnimplementedProblemServiceServer()
}

// UnimplementedProblemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProblemServiceServer struct {
}

func (UnimplementedProblemServiceServer) InsertProblem(context.Context, *Problem) (*ProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertProblem not implemented")
}
func (UnimplementedProblemServiceServer) GetAllProblems(context.Context, *ProbNoParam) (*ProblemList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProblems not implemented")
}
func (UnimplementedProblemServiceServer) FindProblemByID(context.Context, *ProblemId) (*Problem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindProblemByID not implemented")
}
func (UnimplementedProblemServiceServer) EditProblem(context.Context, *Problem) (*Problem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditProblem not implemented")
}
func (UnimplementedProblemServiceServer) AdminUpgradeProbem(context.Context, *ProblemId) (*ProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpgradeProbem not implemented")
}
func (UnimplementedProblemServiceServer) InsertTestCases(context.Context, *TestCaseRequest) (*ProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertTestCases not implemented")
}
func (UnimplementedProblemServiceServer) UpdateTestCases(context.Context, *UpdateTestCaseRequest) (*ProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTestCases not implemented")
}
func (UnimplementedProblemServiceServer) GetProblemWithTestCases(context.Context, *ProblemId) (*GetProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblemWithTestCases not implemented")
}
func (UnimplementedProblemServiceServer) SubmitCode(context.Context, *SubmissionRequest) (*SubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitCode not implemented")
}
func (UnimplementedProblemServiceServer) GetUserStats(context.Context, *UserID) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStats not implemented")
}
func (UnimplementedProblemServiceServer) mustEmbedUnimplementedProblemServiceServer() {}

// UnsafeProblemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProblemServiceServer will
// result in compilation errors.
type UnsafeProblemServiceServer interface {
	mustEmbedUnimplementedProblemServiceServer()
}

func RegisterProblemServiceServer(s grpc.ServiceRegistrar, srv ProblemServiceServer) {
	s.RegisterService(&ProblemService_ServiceDesc, srv)
}

func _ProblemService_InsertProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Problem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).InsertProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProblemService/InsertProblem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).InsertProblem(ctx, req.(*Problem))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_GetAllProblems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProbNoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).GetAllProblems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProblemService/GetAllProblems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).GetAllProblems(ctx, req.(*ProbNoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_FindProblemByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProblemId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).FindProblemByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProblemService/FindProblemByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).FindProblemByID(ctx, req.(*ProblemId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_EditProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Problem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).EditProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProblemService/EditProblem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).EditProblem(ctx, req.(*Problem))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_AdminUpgradeProbem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProblemId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).AdminUpgradeProbem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProblemService/AdminUpgradeProbem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).AdminUpgradeProbem(ctx, req.(*ProblemId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_InsertTestCases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).InsertTestCases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProblemService/InsertTestCases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).InsertTestCases(ctx, req.(*TestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_UpdateTestCases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).UpdateTestCases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProblemService/UpdateTestCases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).UpdateTestCases(ctx, req.(*UpdateTestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_GetProblemWithTestCases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProblemId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).GetProblemWithTestCases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProblemService/GetProblemWithTestCases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).GetProblemWithTestCases(ctx, req.(*ProblemId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_SubmitCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).SubmitCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProblemService/SubmitCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).SubmitCode(ctx, req.(*SubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_GetUserStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).GetUserStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProblemService/GetUserStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).GetUserStats(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

// ProblemService_ServiceDesc is the grpc.ServiceDesc for ProblemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProblemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ProblemService",
	HandlerType: (*ProblemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertProblem",
			Handler:    _ProblemService_InsertProblem_Handler,
		},
		{
			MethodName: "GetAllProblems",
			Handler:    _ProblemService_GetAllProblems_Handler,
		},
		{
			MethodName: "FindProblemByID",
			Handler:    _ProblemService_FindProblemByID_Handler,
		},
		{
			MethodName: "EditProblem",
			Handler:    _ProblemService_EditProblem_Handler,
		},
		{
			MethodName: "AdminUpgradeProbem",
			Handler:    _ProblemService_AdminUpgradeProbem_Handler,
		},
		{
			MethodName: "InsertTestCases",
			Handler:    _ProblemService_InsertTestCases_Handler,
		},
		{
			MethodName: "UpdateTestCases",
			Handler:    _ProblemService_UpdateTestCases_Handler,
		},
		{
			MethodName: "GetProblemWithTestCases",
			Handler:    _ProblemService_GetProblemWithTestCases_Handler,
		},
		{
			MethodName: "SubmitCode",
			Handler:    _ProblemService_SubmitCode_Handler,
		},
		{
			MethodName: "GetUserStats",
			Handler:    _ProblemService_GetUserStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "problem.proto",
}
